/* Copyright (c) 2009-2010, Code Aurora Forum. All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 and
 * only version 2 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301, USA.
 */



/*===========================================================================

                        EDIT HISTORY FOR V11

when         who           what, where, why                 comment tag
--------     ---------     ---------------------------      ----------------
2001/03/28	zhangxb0008		zhangxiaobo		  modify for adding lcd pwm
2011/07/15		chenfei0001			chenfei				for customize pwm frequency
===========================================================================*/

#include <linux/delay.h>
#include <linux/pwm.h>
#ifdef CONFIG_PMIC8058_PWM
#include <linux/mfd/pmic8058.h>
#include <linux/pmic8058-pwm.h>
#endif
#include <mach/gpio.h>
#include <linux/i2c.h>
#include <linux/proc_fs.h>
#include <linux/seq_file.h>
#include "msm_fb.h"
#include "mdp.h"
//#include <video/edid.h>


#ifdef KYLIN_DEBUG_EDID
#define EDID_LENGTH				0x80
#define DDC_ADDR 0x50

struct est_timings {
	u8 t1;
	u8 t2;
	u8 mfg_rsvd;
} __attribute__((packed));


struct std_timing {
	u8 hsize; /* need to multiply by 8 then add 248 */
	u8 vfreq_aspect;
} __attribute__((packed));


struct detailed_pixel_timing {
	u8 hactive_lo;
	u8 hblank_lo;
	u8 hactive_hblank_hi;
	u8 vactive_lo;
	u8 vblank_lo;
	u8 vactive_vblank_hi;
	u8 hsync_offset_lo;
	u8 hsync_pulse_width_lo;
	u8 vsync_offset_pulse_width_lo;
	u8 hsync_vsync_offset_pulse_width_hi;
	u8 width_mm_lo;
	u8 height_mm_lo;
	u8 width_height_mm_hi;
	u8 hborder;
	u8 vborder;
	u8 misc;
} __attribute__((packed));



/* If it's not pixel timing, it'll be one of the below */
struct detailed_data_string {
	u8 str[13];
} __attribute__((packed));

struct detailed_data_monitor_range {
	u8 min_vfreq;
	u8 max_vfreq;
	u8 min_hfreq_khz;
	u8 max_hfreq_khz;
	u8 pixel_clock_mhz; /* need to multiply by 10 */
	__le16 sec_gtf_toggle; /* A000=use above, 20=use below */
	u8 hfreq_start_khz; /* need to multiply by 2 */
	u8 c; /* need to divide by 2 */
	__le16 m;
	u8 k;
	u8 j; /* need to divide by 2 */
} __attribute__((packed));

struct detailed_data_wpindex {
	u8 white_yx_lo; /* Lower 2 bits each */
	u8 white_x_hi;
	u8 white_y_hi;
	u8 gamma; /* need to divide by 100 then add 1 */
} __attribute__((packed));

struct detailed_data_color_point {
	u8 windex1;
	u8 wpindex1[3];
	u8 windex2;
	u8 wpindex2[3];
} __attribute__((packed));


struct cvt_timing {
	u8 code[3];
} __attribute__((packed));

struct detailed_non_pixel {
	u8 pad1;
	u8 type; /* ff=serial, fe=string, fd=monitor range, fc=monitor name
		    fb=color point data, fa=standard timing data,
		    f9=undefined, f8=mfg. reserved */
	u8 pad2;
	union {
		struct detailed_data_string str;
		struct detailed_data_monitor_range range;
		struct detailed_data_wpindex color;
		struct std_timing timings[6];
		struct cvt_timing cvt[4];
	} data;
} __attribute__((packed));

struct detailed_timing {
	__le16 pixel_clock; /* need to multiply by 10 KHz */
	union {
		struct detailed_pixel_timing pixel_data;
		struct detailed_non_pixel other_data;
	} data;
} __attribute__((packed));

struct edid {
	u8 header[8];
	/* Vendor & product info */
	u8 mfg_id[2];
	u8 prod_code[2];
	u32 serial; /* FIXME: byte order */
	u8 mfg_week;
	u8 mfg_year;
	/* EDID version */
	u8 version;
	u8 revision;
	/* Display info: */
	u8 input;
	u8 width_cm;
	u8 height_cm;
	u8 gamma;
	u8 features;
	/* Color characteristics */
	u8 red_green_lo;
	u8 black_white_lo;
	u8 red_x;
	u8 red_y;
	u8 green_x;
	u8 green_y;
	u8 blue_x;
	u8 blue_y;
	u8 white_x;
	u8 white_y;
	/* Est. timings and mfg rsvd timings*/
	struct est_timings established_timings;
	/* Standard timings 1-8*/
	struct std_timing standard_timings[8];
	/* Detailing timings 1-4 */
	struct detailed_timing detailed_timings[4];
	/* Number of 128 byte ext. blocks */
	u8 extensions;
	/* Checksum */
	u8 checksum;
} __attribute__((packed));


static unsigned char *fb_do_probe_ddc_edid(struct i2c_adapter *adapter)
{
	unsigned char start = 0x0;
	unsigned char *buf = kmalloc(EDID_LENGTH, GFP_KERNEL);
	struct i2c_msg msgs[] = {
		{
			.addr	= DDC_ADDR,
			.flags	= 0,
			.len	= 1,
			.buf	= &start,
		}, {
			.addr	= DDC_ADDR,
			.flags	= I2C_M_RD,
			.len	= EDID_LENGTH,
			.buf	= buf,
		}
	};

	if (!buf) {
		dev_warn(&adapter->dev, "unable to allocate memory for EDID "
			 "block.\n");
		return NULL;
	}

	if (i2c_transfer(adapter, msgs, 2) == 2)
		return buf;

	dev_warn(&adapter->dev, "unable to read EDID block.\n");
	kfree(buf);
	return NULL;
}

#endif

#ifdef CONFIG_PMIC8058_PWM
static struct pwm_device *bl_pwm0;

/* for hannstar panel 300hz was the minimum freq where flickering wasnt
 * observed as the screen was dimmed
 */
#define PWM_FREQ_HZ 300
//#define PWM_PERIOD_USEC (USEC_PER_SEC / PWM_FREQ_HZ)
#define PWM_LEVEL 15
//#define PWM_DUTY_LEVEL (PWM_PERIOD_USEC / PWM_LEVEL)
#endif
struct lcdc_hannstar_data {
	struct msm_panel_common_pdata *pdata;
#ifdef CONFIG_FB_MSM_LCDC_DSUB
	int vga_enabled;
#endif
	struct platform_device *fbpdev;
};

static struct lcdc_hannstar_data *dd;




static void lcdc_hannstar_panel_set_backlight(struct msm_fb_data_type *mfd)
{
	int bl_level;
	int ret;

	bl_level = mfd->bl_level;
/*V11 zhangxb0008: deleted by zhangxiaobo_110328 for using gpio26 only */
#ifdef CONFIG_PMIC8058_PWM
	if (bl_pwm0) {
		int duty_us_level, period_us; 
		int pwm_freq = dd->pdata->pwm_freq ? dd->pdata->pwm_freq : PWM_FREQ_HZ;
		period_us = USEC_PER_SEC / pwm_freq;
		duty_us_level = period_us / PWM_LEVEL;
	
		ret = pwm_config(bl_pwm0, duty_us_level * bl_level,
			period_us);
		if (ret)
			printk(KERN_ERR "pwm_config on pwm 0 failed %d\n", ret);
	}
	if (bl_pwm0) {
		ret = pwm_enable(bl_pwm0);
		if (ret)
			printk(KERN_ERR "pwm_enable on pwm 0 failed %d\n", ret);
	}
	
#endif
/*ended by zhangxiaobo_110328 */

}

#ifdef CONFIG_FB_MSM_LCDC_DSUB
static ssize_t show_vga_enable(struct device *device,
			       struct device_attribute *attr, char *buf)
{
	return snprintf(buf, PAGE_SIZE, "%d\n", dd->vga_enabled);
}

static ssize_t store_vga_enable(struct device *dev,
				struct device_attribute *attr,
				const char *buf, size_t count)
{
	unsigned long enable;
	int rc;

	rc = strict_strtoul(buf, 10, &enable);
	if (rc)
		return -EINVAL;

	if (dd->pdata && dd->pdata->vga_switch)
		rc = dd->pdata->vga_switch(enable);
	else
		rc = -ENODEV;
	if (!rc) {
		dd->vga_enabled = enable;
		rc = count;
	}
	return rc;
}

static DEVICE_ATTR(vga_enable, S_IRUGO|S_IWUSR, show_vga_enable,
		   store_vga_enable);
static struct attribute *attrs[] = {
	&dev_attr_vga_enable.attr,
	NULL,
};
static struct attribute_group attr_group = {
	.attrs = attrs,
};
#endif

static int lcdc_proc_show(struct seq_file *m, void *v)
{
	seq_printf(m, "IC:OTD7101A-C1*4(source)+ OTD9800A-C2(gate)\n");
	seq_printf(m, "Glass:TRULY\n");
	seq_printf(m, "Resolution:1280*800\n");
	
	return 0;
}
static int lcdc_proc_open(struct inode *inode, struct file *file)
{
	return single_open(file, lcdc_proc_show, NULL);
}

static ssize_t lcdc_proc_write(struct file *file, const char __user *buffer,
				    size_t count, loff_t *pos)
{	
	return 0;
}
static const struct file_operations lcdc_proc_fops = {
	.open		= lcdc_proc_open,
	.read		= seq_read,
	.llseek		= seq_lseek,
	.release	= single_release,
	.write		= lcdc_proc_write,
};

static int lcdc_proc_init(void)
{
 	struct proc_dir_entry *res;
	res = proc_create("msm_lcd", S_IWUSR | S_IRUGO, NULL,
			  &lcdc_proc_fops);
	if (!res)
	{
		printk(KERN_INFO "failed to create /proc/msm_lcd\n");
		return -ENOMEM;
	}

	printk(KERN_INFO "created /proc/msm_lcd\n");
	return 0;
}

static int __devinit hannstar_probe(struct platform_device *pdev)
{
	int rc = 0;
#ifdef CONFIG_FB_MSM_LCDC_DSUB
	struct msm_fb_data_type *mfd;
#endif

	if (pdev->id == 0) {
		dd = kzalloc(sizeof *dd, GFP_KERNEL);
		if (!dd)
			return -ENOMEM;
#ifdef CONFIG_FB_MSM_LCDC_DSUB
		dd->vga_enabled = 0;
#endif
		dd->pdata = pdev->dev.platform_data;
		return 0;
	} else if (!dd)
		return -ENODEV;

#ifdef CONFIG_PMIC8058_PWM
	bl_pwm0 = pwm_request(dd->pdata->gpio_num[0], "backlight1");
	if (bl_pwm0 == NULL || IS_ERR(bl_pwm0)) {
		pr_err("%s pwm_request() failed\n", __func__);
		bl_pwm0 = NULL;
	}
  /*V11 zhangxb0008: deleted by zhangxiaobo_110328 for using gpio26 only */
	printk(KERN_INFO "hannstar_probe: bl_pwm0=%p LPG_chan0=%d \n",
			bl_pwm0, (int)dd->pdata->gpio_num[0]
			);
	/*ended by zhangxiaobo_110328 */
#endif

	

#ifdef KYLIN_DEBUG_EDID
	i2c_adap = i2c_get_adapter(0);
	panel_edid = (struct edid *)(fb_do_probe_ddc_edid(i2c_adap));
	printk("kylin panel_edid->width_cm = %x\n",panel_edid->width_cm );
	printk("kylin panel_edid->height_cm = %x\n",panel_edid->height_cm );

	printk("kylin panel_edid->established_timings.t1 = %x\n",panel_edid->established_timings.t1 );
	printk("kylin panel_edid->established_timings.t2 = %x\n",panel_edid->established_timings.t2 );
#endif

	dd->fbpdev = msm_fb_add_device(pdev);
	if (!dd->fbpdev) {
		dev_err(&pdev->dev, "failed to add msm_fb device\n");
		rc = -ENODEV;
		goto probe_exit;
	}

#ifdef CONFIG_FB_MSM_LCDC_DSUB
	mfd = platform_get_drvdata(dd->fbpdev);
	if (mfd && mfd->fbi && mfd->fbi->dev) {
		rc = sysfs_create_group(&mfd->fbi->dev->kobj, &attr_group);
		if (rc)
			dev_err(&pdev->dev, "failed to create sysfs group\n");
	} else {
		dev_err(&pdev->dev, "no dev to create sysfs group\n");
		rc = -ENODEV;
	}
#endif

	rc = lcdc_proc_init();
		
	
probe_exit:
	return rc;
}

#ifdef CONFIG_FB_MSM_LCDC_DSUB
static int __devexit hannstar_remove(struct platform_device *pdev)
{
	sysfs_remove_group(&dd->fbpdev->dev.kobj, &attr_group);
	return 0;
}
#endif

static struct platform_driver this_driver = {
	.probe  = hannstar_probe,
#ifdef CONFIG_FB_MSM_LCDC_DSUB
	.remove = hannstar_remove,
#endif
	.driver = {
		.name   = "lcdc_hannstar_wxvga",
	},
};

static struct msm_fb_panel_data hannstar_panel_data = {
	.set_backlight = lcdc_hannstar_panel_set_backlight,
};

static struct platform_device this_device = {
	.name   = "lcdc_hannstar_wxvga",
	.id	= 1,
	.dev	= {
		.platform_data = &hannstar_panel_data,
	}
};
static int __init lcdc_hannstar_panel_init(void)
{
	int ret;
	struct msm_panel_info *pinfo;

#ifdef CONFIG_FB_MSM_MIPI_PANEL_DETECT
	if (msm_fb_detect_client("lcdc_hannstar_wxvga"))
		return 0;
#endif

	ret = platform_driver_register(&this_driver);
	if (ret)
		return ret;


	pinfo = &hannstar_panel_data.panel_info;
	pinfo->xres = 1280;
	pinfo->yres = 800;
#ifdef CONFIG_FB_MSM_LCDC_DSUB
	/* DSUB (VGA) is on the same bus, this allows us to allocate for the
	 * max resolution of the DSUB display */
	pinfo->mode2_xres = 1440;
	pinfo->mode2_yres = 900;
	pinfo->mode2_bpp = 16;
#else
	MSM_FB_SINGLE_MODE_PANEL(pinfo);
#endif

	pinfo->type = LCDC_PANEL;
	pinfo->pdest = DISPLAY_1;
	pinfo->wait_cycle = 0;
	pinfo->bpp = 18;
	pinfo->fb_num = 2;
	#ifdef CONFIG_LCDC_HANNSTAR_WXVGA_PANEL_PCLK_V55
	pinfo->clk_rate = 69300000;
	#elif defined CONFIG_LCDC_HANNSTAR_WXVGA_PANEL_PCLK_V71A
	pinfo->clk_rate = 73100000;
	#elif defined CONFIG_LCDC_HANNSTAR_WXVGA_PANEL_PCLK_V11A
	pinfo->clk_rate = 73100000;
	#else
	pinfo->clk_rate = 69300000;
	#endif
	pinfo->bl_max = 15;
	pinfo->bl_min = 1;

	pinfo->lcdc.h_back_porch = 50;
	pinfo->lcdc.h_front_porch = 500;
	pinfo->lcdc.h_pulse_width = 32;
	pinfo->lcdc.v_back_porch = 2;
	pinfo->lcdc.v_front_porch = 3;
	pinfo->lcdc.v_pulse_width = 1;
	pinfo->lcdc.border_clr = 0;
	pinfo->lcdc.underflow_clr = 0xff;
	pinfo->lcdc.hsync_skew = 0;
	
	ret = platform_device_register(&this_device);
	if (ret)
		platform_driver_unregister(&this_driver);

	return ret;
}

module_init(lcdc_hannstar_panel_init);


